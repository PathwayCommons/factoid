// functions that are exposed to the client side
module.exports = function( model ){

  /* doc schema:

    document: {
      elements: [
        {
          id: "ent1", // ids are actually just unique junk strings generated by derby
          type: "entity", // indicates the type of entity
          name: "some entity" // user specified name
        },

        {
          id: "int1",
          type: "interaction",
          name: "some interaction",
          participantIds: [ "ent1", "ent2" ] // what participants are connected
        }
      ]
    }
  */

  function isFunction( obj ){
    return typeof obj === "function";
  }

  function isObject( obj ){
    return typeof obj === 'object';
  }

  return {

    // .addInteraction({ [type], [name] })
    // adds an interaction to the doc
    // NB: you should listen via addEntity (not addInteraction)
    // otherwise, you'd have to negotiate and merge multiple events (pretty hard)
    addInteraction: function( interaction ){
      interaction = interaction || {}; // ensure we have an object

      if( interaction.type !== "interaction" ){ // enforce interaction type
        interaction.type = "interaction";
      }

      if( !interaction.name ){
        interaction.name = "new interaction";
      }

      interaction.participantIds = [];
      interaction.interaction = true;

      return this.addEntity(interaction);
    },

    // .addEntity({ [type], [name], [viewport] })
    // add an entity to the document
    // 
    // .addEntity( function( entity ){} )
    // listen for when entities are added
    addEntity: function( entity ){
      var fn = arguments[0];
      if( isFunction( fn ) ){ // then bind to when an entity is added to the doc
        model.on('push', '_entities', function(entity, index, isLocal){
          fn( entity );
        });
        return;

      } else { // then add the entity to the doc
        if( !entity ){ // in case nothing specified
          entity = {};
        }

        if( !entity.type ){ // in case type is elided
          entity.type = "entity";
        }

        if( !entity.name ){ // in case name is elided, use some default value
          entity.name = "new entity";
        }

        entity.entity = true;

        if( !entity.viewport ){
          entity.viewport = {
            x: 0,
            y: 0
          };
        }

        if( entity.id === undefined ){ // then generate an id for the entity
          entity.id = model.id();
        }

        model.push( "_entities", entity );
      }

      return entity.id;
    },

    // .removeEntity( entityId )
    // removes the entity from the document
    //
    // .removeEntity( function( entityId ){} )
    // listens for when entities are removed
    removeEntity: function( entityId ){
      var fn = arguments[0];
      if( isFunction( fn ) ){ // then bind to when an entity is removed from the doc
        model.on('remove', '_entities', function(index, howMany, removedArray, isLocal){
          var id = removedArray[0].id;
          fn( id );
        });
        return;

      } else { // then remove the entity from the doc
        var index = model.at('_entityIdToIndex').get( entityId );
        model.remove('_entities', index);

        var connectedIntIds = model.filter('_entities').where('participantIds').contains( [entityId] ).only('id');
        console.log( connectedIntIds );
      }
    },

    // .connectEntityToInteraction(intId, entId) : connects entity to interaction
    // fails when
    //  - entity and interaction are the same
    //  - entity or interaction aren't in the document
    //  - entity is already connected to interaction
    //  - the interaction specified isn't actually one
    //
    // .connectEntityToInteraction()
    connectEntityToInteraction: function( entityId, interactionId ){
      var intIndex, entIndex, interaction, entity;
      var fn = arguments[0];

      if( isFunction(fn) ){ // then listen to when entities are connected to interactions
        model.on('push', '_entities.*.participantIds', function(intIndex, entityId){
          console.log('connect', arguments);
          //var interactionId = model.get('_entities.' + intIndex + '.id');
          //fn(entityId, interactionId);
        });
        return;
      }

      if( interactionId === entityId ){
        return; // you can't connect an interaction to itself
      }

      var entityExists = this.entityExists( entityId );
      var interactionExists = this.entityExists( interactionId );

      var inDoc = entityExists && interactionExists;
      if( !inDoc ){
        return; // you can't connect them together if they don't exist in the doc
      }
      var interaction = this.entity( interactionId );
      var interactionIsRightType = interaction.interaction;
      if( !interactionIsRightType ){ return; } // can't connect if not right type

      // check if the entity is already connected
      var entityAlreadyConnected = this.interactionHasParticipant( interactionId, entityId );
      if( entityAlreadyConnected ){ return; } // can't connect if already connected

      var intIndex = model.at('_entityIdToIndex').at( interactionId ).get();
      model.push('_entities.' + intIndex + '.participantIds', entityId);

    },

    disconnectEntityFromInteraction: function( entityId, interactionId ){
      var fn = arguments[0];

      if( isFunction(fn) ){ // then listen to when entities are disconnected to interactions
        model.on('remove', '_entities.*.participantIds', function(intIndex, index, howMany, array){
          entityId = array[index];
          var interactionId = model.get('_entities.' + intIndex + '.id');
          fn(entityId, interactionId);
        });
        return;
      }

      var entity = this.entity(entityId);
      var interaction = this.entity(interactionId);
      var intIndex = this.entityIndex(interactionId);

      var inDoc = entity && interaction;
      var interactionIsRightType = interaction.type === 'interaction;'
      if( !inDoc ){
        return; // you can't connect them together if they don't exist in the doc
      }

      // check if the entity is already connected
      var entityAlreadyConnected = false;
      var pids = interaction.participantIds;
      var entIndex;
      for( var i = 0; i < pids.length; i++ ){
        var pid = pids[i];

        if( pid === entityId ){
          entityAlreadyConnected = true;
          entIndex = i;
          break;
        }
      }

      if( entityAlreadyConnected ){
        model.remove('_entities.' + intIndex + '.participantIds', entIndex, 1);
      }
    },

    // TODO document
    entityName: function( entityId, name ){
      var fn = arguments[0];
      

      if( isFunction(fn) ){
        var entityId = name;

        if( entityId === undefined ){
          model.on('set', '_entities.*.name', function(index, newName, oldName, isLocal){
            fn( model.get('_entities.' + index + '.id'), newName );
          });
        } else {
          var index = getEntityIndex(entityId);
          model.on('set', '_entities.' + index + '.name', function(newName){
            fn(entityId, newName);
          });
        }

      } else if( name === undefined ) {
        var index = getEntityIndex(entityId);
        return model.get('_entities.' + index + '.name');

      } else {
        var index = getEntityIndex(entityId);
        model.set('_entities.' + index + '.name', name);
      }
    },

    entityViewport: function( entityId, viewport ){
      var fn = arguments[0];

      if( isFunction(fn) ){
        model.on('set', '_entities.*.viewport', function(index, oldPos, newPos, isLocal){

          if( isLocal ){ return; } // don't trigger if we moved it (since we're already up-to-date)

          if( newPos.x === undefined || newPos.y === undefined ){
            newPos = oldPos;
          }

          var id = model.get('_entities.' + index + '.id');
          fn(id, newPos);
        });

      } else if( viewport === undefined ) {
        return model.get('_entities.' + getEntityIndex(entityId) + '.viewport');
      
      } else {
        model.set('_entities.' + getEntityIndex(entityId) + '.viewport', viewport);
      }
    },

    entity: function( entityId ){
      return model.at('_entities').at( model.at('_entityIdToIndex').at(entityId).get() ).get();
    },

    entityExists: function( entityId ){
      return this.entity( entityId ) !== undefined;
    },

    entities: function(){
      return model.get('_entities');
    },

    interactionParticipants: function( interactionId ){
      var pids = this.entity( interactionId ).participantIds;
      var participants = [];

      for( var i = 0; i < pids.length; i++ ){
        var pid = pids[i];
        var entity = this.entity( pid );

        participants.push( entity );
      }   

      return participants;
    },

    interactionHasParticipant: function( interactionId, participantId ){
      var partsIds = this.entity( interactionId ).participantIds;
      for( var i = 0; i < partsIds.length; i++ ){
        var id = partsIds[i];

        if( id === participantId ){
          return true;
        }
      }

      return false;
    }

  };
};