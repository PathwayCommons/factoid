// Generated by CoffeeScript 1.3.1
var hasKeys, pathRegExp, patternInterface;

pathRegExp = require('../../path').regExp;

hasKeys = require('../../util').hasKeys;

module.exports = patternInterface = function(pubSub) {
  var forwardIndex, intf, reverseIndex;
  forwardIndex = {};
  reverseIndex = {};
  intf = {};
  intf.subscribe = function(subscriberId, pattern, ackCb) {
    var subsForPattern;
    (reverseIndex[subscriberId] || (reverseIndex[subscriberId] = {}))[pattern] = true;
    if (!(subsForPattern = forwardIndex[pattern])) {
      subsForPattern = forwardIndex[pattern] = {
        re: pathRegExp(pattern),
        subscribers: {}
      };
    }
    subsForPattern.subscribers[subscriberId] = true;
    return typeof ackCb === "function" ? ackCb(null) : void 0;
  };
  intf.publish = function(msg) {
    var params, pattern, re, subscriberId, subscribers, type, _ref, _results;
    type = msg.type, params = msg.params;
    switch (type) {
      case 'txn':
      case 'ot':
        _results = [];
        for (pattern in forwardIndex) {
          _ref = forwardIndex[pattern], re = _ref.re, subscribers = _ref.subscribers;
          if (!re.test(params.channel)) {
            continue;
          }
          _results.push((function() {
            var _results1;
            _results1 = [];
            for (subscriberId in subscribers) {
              _results1.push(pubSub.emit(type, subscriberId, params.data));
            }
            return _results1;
          })());
        }
        return _results;
    }
  };
  intf.unsubscribe = function(subscriberId, pattern, ackCb) {
    var patterns, subscribers;
    if (typeof pattern !== 'string') {
      ackCb = pattern;
      for (pattern in reverseIndex[subscriberId]) {
        subscribers = forwardIndex[pattern].subscribers;
        delete subscribers[subscriberId];
        if (!hasKeys(subscribers)) {
          delete forwardIndex[pattern];
        }
      }
      delete reverseIndex[subscriberId];
    } else {
      if (!(patterns = reverseIndex[subscriberId])) {
        return typeof ackCb === "function" ? ackCb(null) : void 0;
      }
      delete patterns[pattern];
      if (!hasKeys(patterns)) {
        delete reverseIndex[subscriberId];
      }
      subscribers = forwardIndex[pattern].subscribers;
      delete subscribers[subscriberId];
      if (!hasKeys(subscribers)) {
        delete forwardIndex[pattern];
      }
    }
    return typeof ackCb === "function" ? ackCb(null) : void 0;
  };
  intf.hasSubscriptions = function(subscriberId) {
    return subscriberId in reverseIndex;
  };
  intf.subscribedTo = function(subscriberId, pattern) {
    var patterns;
    if (!(patterns = reverseIndex[subscriberId])) {
      return false;
    }
    return pattern in patterns;
  };
  return intf;
};
