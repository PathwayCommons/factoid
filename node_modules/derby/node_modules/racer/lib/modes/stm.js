// Generated by CoffeeScript 1.3.1
var Serializer, Stm, copy, createJournal, transaction;

transaction = require('../transaction.server');

Serializer = require('../Serializer');

createJournal = require('./shared').createJournal;

module.exports = function(storeOptions) {
  var journal;
  journal = createJournal(storeOptions);
  return new Stm(storeOptions.store, journal);
};

Stm = function(store, journal) {
  this._store = store;
  this._journal = journal;
  store = this._store;
  this._txnApplier = new Serializer({
    withEach: function(txn, ver, cb) {
      return store._finishCommit(txn, ver, cb);
    }
  });
};

Stm.prototype.startId = function(cb) {
  return this._journal.startId(cb);
};

Stm.prototype.commit = function(txn, cb) {
  var eachCb, journal, txnApplier, ver;
  ver = transaction.getVer(txn);
  if (ver != null) {
    if (typeof ver !== 'number') {
      return typeof cb === "function" ? cb(new Error('Version must be null or a number')) : void 0;
    }
    eachCb = function(err, loggedTxn, next) {
      if ((ver != null) && (err = transaction.conflict(txn, loggedTxn))) {
        return next(err);
      }
      return next(null);
    };
  } else {
    eachCb = function(err, loggedTxn, next) {
      return next(null);
    };
  }
  journal = this._journal;
  txnApplier = this._txnApplier;
  return journal.eachTxnSince(ver, {
    meta: {
      txn: txn
    },
    each: eachCb,
    done: function(err, addParams) {
      var journalTxn;
      if (err) {
        return typeof cb === "function" ? cb(err) : void 0;
      }
      journalTxn = copy(txn);
      return journal.add(journalTxn, addParams, function(err, ver) {
        if (err) {
          return typeof cb === "function" ? cb(err) : void 0;
        }
        transaction.setVer(journalTxn, ver);
        return txnApplier.add(txn, ver, cb);
      });
    }
  });
};

Stm.prototype.flush = function(cb) {
  return this._journal.flush(cb);
};

Stm.prototype.disconnect = function() {
  var _base;
  return typeof (_base = this._journal).disconnect === "function" ? _base.disconnect() : void 0;
};

Stm.prototype.checkStartMarker = function(clientStartId, cb) {
  return this._journal.startId(function(err, startId) {
    if (err) {
      return cb(err);
    }
    if (clientStartId !== startId) {
      err = "clientStartId != startId (" + clientStartId + " != " + startId + ")";
      return cb(err);
    }
    return cb(null);
  });
};

Stm.prototype.version = function(cb) {
  return this._journal.version(cb);
};

Stm.prototype.snapshotSince = function(_arg, cb) {
  var clientId, ver;
  ver = _arg.ver, clientId = _arg.clientId;
  return this._journal.txnsSince(ver, clientId, this._store._pubSub, function(err, txns) {
    if (err) {
      return cb(err);
    }
    return cb(null, {
      txns: txns
    });
  });
};

copy = function(x) {
  return JSON.parse(JSON.stringify(x));
};
