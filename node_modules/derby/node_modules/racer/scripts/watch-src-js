#! /usr/bin/env node

var fs = require('fs')
  , path = require('path')
  , util = require('util')
  , exec = require('child_process').exec

  , sources = []
  , sourceCode = []
  , notSources = {}

  , SRC = './src/'
  , TARG = './lib/';

compilePath(SRC, true, path.normalize(SRC));

function compilePath (src, isTopLevel, base) {
  fs.stat(src, function (err, stats) {
    if (err) {
      if (err.code !== 'ENOENT') throw err;
      if (isTopLevel && src.substring(src.length-3) !== '.js') {
        src = sources[sources.indexOf(src)] = src + '.js';
        return compilePath(src, isTopLevel, base);
      }
      if (isTopLevel) {
        console.error('File not found: ' + src);
        process.exit(1);
      }
      return;
    }
    if (stats.isDirectory()) {
      watchDir(src, base);
      fs.readdir(src, function (err, files) {
        if (err) {
          if (err.code !== 'ENOENT') throw err;
          return;
        }
        var normFiles = [];
        for (var i = files.length; i--; ) {
          normFiles[i] = path.join(src, files[i]);
        }
        var index = sources.indexOf(src);
        sources.splice.apply(sources, [index, 0].concat(normFiles));
        for (var i = files.length; i--; ) {
          compilePath( path.join(src, files[i]), false, base);
        }
      });
    } else if (isTopLevel || path.extname(src) === '.js') {
      watch(src, base);
      path.exists(src, function (exists) {
        if (exists) copyScript(src, base);
      });
    } else {
      notSources[src] = true;
      removeSource(src, base);
    }
  });
}

function watchDir (src, base) {
  var readdirTimeout = null
    , watcher;
  try {
    watcher = fs.watch(src, function () {
      clearTimeout(readdirTimeout);
      readdirTimeout = setTimeout( function () {
        fs.readdir(src, function (err, files) {
          if (err) {
            if (err.code !== 'ENOENT') throw err;
            watcher.close();
            return unwatchDir(src, base);
          }
          for (var file, inSources, i = files.length; i--; ) {
            if (notSources[file]) continue;
            file = path.join(src, files[i]);
            inSources = sources.some( function (s) {
              return s.indexOf(file) !== -1;
            });
            if (inSources) continue;
            sources.push(file);
            sourceCode.push(null);
            compilePath(file, false, base);
          }
        });
      }, 25);
    });
  } catch (err) {
    if (err.code !== 'ENOENT') throw err;
  }
}

function unwatchDir (src, base) {
  var prevSources = sources.slice()
    , toRemove = sources.filter( function (file) {
        return file.indexOf(src) !== -1;
      });
  for (var i = toRemove.length; i--; ) {
    removeSource(toRemove[i], base, true);
  }
  if (! sources.some( function (s, i) { return prevSources[i] !== s } ) ) {
    return;
  }
}

function removeSource (src, base, removeJs) {
  var index = sources.indexOf(src);
  sources.splice(index, 1);
  sourceCode.splice(index, 1);
  if (removeJs) {
    var jsPath = outputPath(src, base);
    path.exists(jsPath, function (exists) {
      if (exists) {
        fs.unlink(jsPath, function (err) {
          if (err && err.code !== 'ENOENT') throw err;
        });
      }
    });
  }
}

function watch (src, base) {
  var prevStats = null
    , compileTimeout = null
    , watcher;

  try {
    watcher = fs.watch(src, compile);
  } catch (err) {
    watchErr(err);
  }

  function compile () {
    clearTimeout(compileTimeout);
    compileTimeout = setTimeout( function () {
      fs.stat(src, function (err, stats) {
        if (err) return watchErr(err);
        if (prevStats && isEqualStats(prevStats, stats)) {
          return rewatch();
        }
        prevStats = stats;
        fs.readFile(src, function (err, code) {
          if (err) return watchErr(err);
          copyScript(src, base);
          rewatch();
        });
      });
    }, 25);
  }

  function rewatch () {
    if (watcher) watcher.close();
    watcher = fs.watch(src, compile);
  }

  function watchErr (err) {
    if (err.code === 'ENOENT') {
      if (sources.indexOf(src) === -1) {
        return;
      }
      try {
        rewatch();
        compile();
      } catch (e) {
        removeSource(src, base, true);
      }
    } else {
      throw err;
    }
  }
};

function isEqualStats (statsA, statsB) {
  return statsA.size === statsB.size && statsA.mtime.getTime() === statsB.mtime.getTime();
}

function outputPath (src, base) {
  var filename = path.basename(src)
    , srcDir = path.dirname(src)
    , baseDir = base === '.' ? srcDir : srcDir.substring(base.length)
    , dir = path.join(TARG, baseDir);
  return path.join(dir, filename);
}

function copyScript (file, base) {
  var outputFilepath = outputPath(file, base)
    , outputDir = path.dirname(outputFilepath);
  path.exists(outputDir, function (exists) {
    if (exists) {
      copy();
    } else {
      exec('mkdir -p ' + outputDir, copy);
    }
  });
  function copy () {
    var srcFile  = fs.createReadStream(file)
      , targFile = fs.createWriteStream(outputFilepath);
    util.pump(srcFile, targFile);
    targFile.on('close', function () {
      timeLog('copied ' + file);
    });
  }
}

function timeLog (msg) {
  console.log((new Date).toLocaleTimeString() + ' - ' + msg);
}
